/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import notreprojetjava.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import static notreprojetjava.JDetailMission.maMission;

/**
 *
 * @author achambri
 */
public class AjoutMission2 extends javax.swing.JFrame {

    /**
     * Creates new form AjoutMission
     */
    static Entreprise entreprise;
    private Mission maMission ;
    public AjoutMission2(Entreprise entreprise) {
        initComponents();
        ajouterComp.setEnabled(true);
        this.entreprise = entreprise ;
        DefaultTableModel modelLesComp = new DefaultTableModel();
        modelLesComp.addColumn("id");
        modelLesComp.addColumn("libelle");
        for(Competence maCompetencesCSV : entreprise.getListeCompetences()){
                modelLesComp.addRow(new String[]{maCompetencesCSV.getId(), maCompetencesCSV.getLibelleFR()});
        }
        jtableLesCompetences.setModel(modelLesComp);
        
        DefaultTableModel modelCompMission = new DefaultTableModel();
        modelCompMission.addColumn("id");
        modelCompMission.addColumn("libelle");
        modelCompMission.addColumn("Requis");
        
        compMission.setModel(modelCompMission);
        
        
        DefaultTableModel modelEmp = new DefaultTableModel();
        modelEmp.addColumn("id");
        modelEmp.addColumn("Nom");
        modelEmp.addColumn("Prenom");
        for(Employe monEmpDuCSVFile : entreprise.getListeEmployes()){
            modelEmp.addRow(new String[]{monEmpDuCSVFile.getId(), monEmpDuCSVFile.getNom(),monEmpDuCSVFile.getPrenom()});
        }
        lesEmp.setModel(modelEmp);
        
        DefaultTableModel modelEmpMiss = new DefaultTableModel();
        modelEmpMiss.addColumn("id");
        modelEmpMiss.addColumn("Nom");
        modelEmpMiss.addColumn("Prenom");
        lesEmpDeLaMiss.setModel(modelEmpMiss);
        
         //initComponents();
         this.setDefaultCloseOperation(2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtableLesCompetences = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dateDebJ = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        dateDebM = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTLibelle = new javax.swing.JTextField();
        dateDebA = new javax.swing.JTextField();
        jTNbEmpMax = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        dateFinJ = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        dateFinM = new javax.swing.JTextField();
        dateFinA = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        compMission = new javax.swing.JTable(){
            public boolean isCellEditable(int d, int c){
                return false;
            }
        };
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        ajouterComp = new javax.swing.JButton();
        spnComp = new javax.swing.JSpinner();
        BTNAjout = new javax.swing.JButton();
        BTNRetour = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        removeComp = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lesEmp = new javax.swing.JTable(){
            public boolean isCellEditable(int d, int c){
                return false;
            }
        };
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lesEmpDeLaMiss = new javax.swing.JTable(){
            public boolean isCellEditable(int d, int c){
                return false;
            }
        };
        ajoutEmp = new javax.swing.JButton();
        removeEmp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtableLesCompetences.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtableLesCompetences);

        jLabel1.setText("Libellé :");

        jLabel13.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel13.setText("Création de mission :");

        jLabel10.setText("/");

        jLabel5.setText("Date début :");

        jLabel2.setText("Nombre d'employés Maximum :");

        jLabel6.setText("/");

        jLabel7.setText("/");

        jLabel8.setText("Date Fin :");

        jLabel9.setText("/");

        jLabel12.setText("Liste des compétences :");

        compMission.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        compMission.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compMissionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(compMission);

        jLabel11.setText("Compétences requises pour la mission :");

        jLabel14.setText("Requis : ");

        ajouterComp.setText("Ajouter >>");
        ajouterComp.setEnabled(false);
        ajouterComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterCompActionPerformed(evt);
            }
        });

        spnComp.setValue(1);
        spnComp.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spnComp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnCompStateChanged(evt);
            }
        });

        BTNAjout.setBackground(new java.awt.Color(132, 204, 132));
        BTNAjout.setText("Ajouter");
        BTNAjout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNAjoutActionPerformed(evt);
            }
        });

        BTNRetour.setBackground(new java.awt.Color(239, 131, 131));
        BTNRetour.setText("Retour");
        BTNRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNRetourActionPerformed(evt);
            }
        });

        removeComp.setText("<< Supprimer");
        removeComp.setEnabled(false);
        removeComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCompActionPerformed(evt);
            }
        });

        jLabel3.setText("Liste des employés :");

        lesEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        lesEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lesEmpMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lesEmp);

        jLabel4.setText("Employés affectés à la mission :");

        lesEmpDeLaMiss.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        lesEmpDeLaMiss.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lesEmpDeLaMissMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(lesEmpDeLaMiss);

        ajoutEmp.setText("Ajouter >>");
        ajoutEmp.setEnabled(false);
        ajoutEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutEmpActionPerformed(evt);
            }
        });

        removeEmp.setText("<< Supprimer");
        removeEmp.setEnabled(false);
        removeEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEmpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel14)
                                                .addGap(29, 29, 29)
                                                .addComponent(spnComp, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addComponent(ajouterComp)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(removeComp, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(100, 100, 100)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(BTNRetour)
                                        .addGap(49, 49, 49)
                                        .addComponent(BTNAjout))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ajoutEmp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(removeEmp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(jLabel8))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateFinJ, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateDebJ, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dateDebM, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dateFinM, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateDebA)
                                    .addComponent(dateFinA, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel13)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTNbEmpMax)
                                    .addComponent(jTLibelle, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTLibelle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTNbEmpMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dateDebM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(dateDebJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateDebA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateFinM, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(dateFinJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(jLabel9)
                        .addComponent(dateFinA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(ajouterComp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(spnComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeComp)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ajoutEmp)
                        .addGap(18, 18, 18)
                        .addComponent(removeEmp)
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTNRetour)
                            .addComponent(BTNAjout)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ajouterCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterCompActionPerformed
        // TODO add your handling code here:
        int ligne = jtableLesCompetences.getSelectedRow();
        int colonneId = 0 ;
        int colonneNomFra = 1;
        String id = (String) jtableLesCompetences.getValueAt(ligne, colonneId);
        String nomFra = (String) jtableLesCompetences.getValueAt(ligne, colonneNomFra);
        System.out.println(spnComp.getValue());
        int spnI = ((Integer) spnComp.getValue()).intValue();
        String spnS = spnComp.getValue().toString();
        System.out.println(spnS);

     
        DefaultTableModel modelLesCompMission =(DefaultTableModel)  compMission.getModel();
        modelLesCompMission.addRow(new Object[]{id,nomFra,spnS});
        compMission.setModel(modelLesCompMission);

        //Enlever la compétence de la Jtable

        DefaultTableModel modelLesComp =(DefaultTableModel)  jtableLesCompetences.getModel();
        modelLesComp.removeRow(ligne);
        System.out.println(spnI);
        jtableLesCompetences.setModel(modelLesComp);

        for(Competence uneComp : entreprise.getListeCompetences() ){
            if(uneComp.getId().equals(id)){
                entreprise.addCompMiss(maMission, uneComp, spnI);
            }
        }
        entreprise.generateStatut(maMission);
        ajouterComp.setEnabled(true);
        
    }//GEN-LAST:event_ajouterCompActionPerformed

    private void spnCompStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnCompStateChanged
    

       
    }//GEN-LAST:event_spnCompStateChanged

    private void BTNAjoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNAjoutActionPerformed
        String erreur = "" ;
        String newLine = System.getProperty("line.separator");
        if(jTLibelle.getText().equals("")){
            erreur += "veuillez entrer un libellé" + newLine;
        }
        if(jTNbEmpMax.getText().equals("")){
            erreur += "veuillez entrer un nombre maximum" + newLine;
        }
        if(dateDebA.getText().equals("")){
            erreur += "veuillez entrer l'année de la date de début" + newLine;
        }
        if(dateDebJ.getText().equals("")){
            erreur += "veuillez entrer le jour de la date de début" + newLine;
        }
        if(dateDebM.getText().equals("")){
            erreur += "veuillez entrer le mois de la date de début" + newLine;
        }
        if(dateFinA.getText().equals("")){
            erreur += "veuillez entrer l'année de la date de Fin" + newLine;
        }
        if(dateFinJ.getText().equals("")){
            erreur += "veuillez entrer le jour de la date de Fin" + newLine;
        }
        if(dateFinM.getText().equals("")){
            erreur += "veuillez entrer le mois de la date de Fin" + newLine;
        }
        
        
        if(erreur != ""){
            message.setText(erreur);
        } else {
            String dateDeb = "" ;
            dateDeb += dateDebJ.getText() + "/";
            dateDeb += dateDebM.getText() + "/";
            dateDeb += dateDebA.getText();
            
            String dateFin = "";
            dateFin += dateFinJ.getText() + "/";
            dateFin += dateFinM.getText() + "/";
            dateFin += dateFinA.getText();
            
            try {
                entreprise.creerMission("M" + entreprise.getListeMissions().size() + 1,jTLibelle.getText() , dateDeb, dateFin, Integer.parseInt(jTNbEmpMax.getText()));
                maMission = new Mission("M" + entreprise.getListeMissions().size() + 1,jTLibelle.getText(), Integer.parseInt(jTNbEmpMax.getText()), dateDeb, dateFin);
                int nbCompte = compMission.getColumnCount();
                for (int i = 0; i < nbCompte; i++) {
                    String idMission = (String)compMission.getValueAt(i, 0);
                    String nbRequis = (String)compMission.getValueAt(i, 2);
                    entreprise.addCompMiss(maMission, entreprise.recupCompById(idMission), Integer.parseInt(nbRequis));
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(AjoutMission2.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(AjoutMission2.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                entreprise.saveMiss();
                jTLibelle.setText("");
                jTNbEmpMax.setText("");
                dateDebA.setText("");
                dateDebJ.setText("");
                dateDebM.setText("");
                dateFinA.setText("");
                dateFinM.setText("");
                dateFinJ.setText("");
                
                DefaultTableModel modelCompMission = new DefaultTableModel();
                modelCompMission.addColumn("id");
                modelCompMission.addColumn("libelle");
                modelCompMission.addColumn("Requis");

                compMission.setModel(modelCompMission);
                
                message.setText("Mission bien ajoutée");
            } catch (IOException ex) {
                Logger.getLogger(AjoutMission2.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_BTNAjoutActionPerformed

    private void BTNRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNRetourActionPerformed
        this.dispose();
    }//GEN-LAST:event_BTNRetourActionPerformed

    private void removeCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCompActionPerformed
        int ligne = compMission.getSelectedRow();
        int colonneId = 0 ;
        int colonneLibelle = 1;
        int colonneRequis = 2 ;
        String id = (String) compMission.getValueAt(ligne, colonneId);
        String libelle = (String) compMission.getValueAt(ligne, colonneLibelle);
        String requisS = (String) compMission.getValueAt(ligne, colonneRequis);
        Integer requis = Integer.parseInt(requisS);

        int requisSuppr = ((Integer) spnComp.getValue()).intValue();

        if(requis - requisSuppr <= 0){

            DefaultTableModel modelLesCompetences =(DefaultTableModel)  jtableLesCompetences.getModel();
            modelLesCompetences.addRow(new Object[]{id,libelle});
            jtableLesCompetences.setModel(modelLesCompetences);

//            DefaultTableModel modelCompMission = new DefaultTableModel();
//            modelCompMission.addColumn("id");
//            modelCompMission.addColumn("libelle");
//            modelCompMission.addColumn("Requis");
//            for(HashMap.Entry<Competence,Integer> entry : maMission.compRemp.entrySet()){
//                Competence key = entry.getKey();
//                Integer value = entry.getValue();
//                for(Employe monEmp : maMission.equipe){
//                    if(monEmp.getCompetences().contains(key)){
//                        value = value - 1 ;
//                    }
//                }
//                if(key.getId().equals(id)){
//
//                    entreprise.delCompMiss(maMission, entreprise.recupCompById(id) );
//                    value = 0;
//                }
//                if(value < 1){
//                    value = 0 ;
//                }
//                if(!value.equals(0)){
//                    System.out.println(" COUCOU " + value);
//                    modelCompMission.addRow(new String[]{key.getId(), key.getLibelleFR(),value.toString()});
//                }
//            }
            DefaultTableModel modelCompMission = (DefaultTableModel)  compMission.getModel();
            int rowSupp = compMission.getSelectedRow();
            System.out.println("COUCOU");
            System.out.println("COUCOU");
            System.out.println(rowSupp);
            System.out.println("COUCOU");
            System.out.println("COUCOU");
            modelCompMission.removeRow(rowSupp);
            compMission.setModel(modelCompMission);

        }else{
            DefaultTableModel modelCompMission = (DefaultTableModel)  compMission.getModel();
//            modelCompMission.addColumn("id");
//            modelCompMission.addColumn("libelle");
//            modelCompMission.addColumn("Requis");
//            for(HashMap.Entry<Competence,Integer> entry : maMission.compRemp.entrySet()){
//                Competence key = entry.getKey();
//                Integer value = entry.getValue();
//                for(Employe monEmp : maMission.equipe){
//                    if(monEmp.getCompetences().contains(key)){
//                        value = value - 1 ;
//                    }
//                }
//                if(key.getId().equals(id)){
//                    value = value - requisSuppr;
//                }
//                if(value < 1){
//                    value = 0 ;
//                }
//                if(value != 0){
//                    modelCompMission.addRow(new String[]{key.getId(), key.getLibelleFR(),value.toString()});
//                }
//
//            }
//            entreprise.delCompRequMiss(maMission, entreprise.recupCompById(id), requisSuppr);
            int RowComp = compMission.getSelectedRow();
            colonneId = 0 ;
            colonneLibelle = 1;
            colonneRequis = 2 ;
            id = (String) compMission.getValueAt(ligne, colonneId);
            libelle = (String) compMission.getValueAt(ligne, colonneLibelle);
            String requisString = (String) compMission.getValueAt(ligne, colonneRequis);
            requis = Integer.parseInt(requisString);
            requis = requis - requisSuppr ;
            modelCompMission.removeRow(RowComp);
            modelCompMission.addRow(new Object[]{id,libelle,requis});
            compMission.setModel(modelCompMission);
        }

    }//GEN-LAST:event_removeCompActionPerformed

    private void compMissionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compMissionMouseClicked
        // TODO add your handling code here:
        removeComp.setEnabled(true);
        spnComp.setEnabled(true);
    }//GEN-LAST:event_compMissionMouseClicked

    private void lesEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lesEmpMouseClicked
        // TODO add your handling code here:
        ajoutEmp.setEnabled(true);
    }//GEN-LAST:event_lesEmpMouseClicked

    private void lesEmpDeLaMissMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lesEmpDeLaMissMouseClicked
     //   removeEmp.setEnabled(true);
        removeEmp.setEnabled(true);
    }//GEN-LAST:event_lesEmpDeLaMissMouseClicked

    private void ajoutEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutEmpActionPerformed
        // TODO add your handling code here:

        //Ajoute l'employé dans la Jtable lesEmpDeLaMiss
        int ligne = lesEmp.getSelectedRow();
        int colonneId = 0 ;
        int colonneNom = 1;
        int colonnePrenom = 2 ;
        String idEmp = (String) lesEmp.getValueAt(ligne, colonneId);
        String nom = (String) lesEmp.getValueAt(ligne, colonneNom);
        String prenom = (String) lesEmp.getValueAt(ligne, colonnePrenom);
        
 
        Employe e = entreprise.recupEmpById(idEmp);

        DefaultTableModel modelLesEmpDeLaMission =(DefaultTableModel)  lesEmpDeLaMiss.getModel();
        modelLesEmpDeLaMission.addRow(new Object[]{idEmp,nom,prenom});
        lesEmpDeLaMiss.setModel(modelLesEmpDeLaMission);
        //Enlève l'employé das Jtable lesEmp
        DefaultTableModel modelLesEmp =(DefaultTableModel)  lesEmp.getModel();
        modelLesEmp.removeRow(ligne);
        lesEmp.setModel(modelLesEmp);
        
        DefaultTableModel modelCompMission = (DefaultTableModel)  compMission.getModel();
        ArrayList<Integer> aSuppr = new ArrayList<Integer>();
        int nbLigne = compMission.getRowCount() ;
        for(int i = 0; i < nbLigne ;i++){
//            System.out.println("COUCOU1");
//            System.out.println("COUCOU1");
            String idComp = (String) compMission.getValueAt(i, 0);
            for(Competence CompEmp : entreprise.recupEmpById(idEmp).getCompetences()){
//                System.out.println("COUCOU2");
//                System.out.println("COUCOU2");
//                System.out.println("idComp : " + idComp);
//                System.out.println("CompEmp : " + CompEmp);
                if(idComp.equals(CompEmp.getId())){
//                    System.out.println("COUCOU3");
//                    System.out.println("COUCOU3");

                    int colonneLibelle = 1;
                    int colonneRequis = 2 ;
                    System.out.println("R1");
                    String libelle = (String) compMission.getValueAt(i, colonneLibelle);
                    System.out.println("R2");
                    String requisString = (String) compMission.getValueAt(i, colonneRequis);
                    System.out.println("R3");
                    Integer requis = Integer.parseInt(requisString);
                    System.out.println("R4");
                    requis = Integer.parseInt(requisString);
                    System.out.println("R5");
                    requis = requis - 1 ;
                    aSuppr.add(i);
                    modelCompMission.addRow(new Object[]{idComp,libelle,requis});
                    
//                    if(requis > 0){
//                        modelCompMission.addRow(new Object[]{idComp,libelle,requis});
//                    }
//                    else{
//                        modelCompMission.removeRow(i);
//                    }
                }  
            }
        }
        System.out.println("BONJOUR");
        System.out.println("BONJOUR");
        System.out.println("size : " + aSuppr.size() );
        for(int y = 0 ; y < aSuppr.size() ; y++){
            System.out.println("aSuppr : " + aSuppr.get(y) );
            modelCompMission.removeRow(0);
        }
                     
        
        //compMission.setModel(modelCompMission);
        //Ajoute l'employé dans la liste d'employé de la mission et réduir le requis de jtable compMission

//        DefaultTableModel modelComMission =(DefaultTableModel)  compMission.getModel();
//        ajoutEmp.setEnabled(false);
        //        for(Employe unEmp : entreprise.getListeEmployes() ){
            //            if(unEmp.getId().equals(id)){
                //                maMission.equipe.add(unEmp);
                //                for(int i=0; i<compMission.getRowCount();i++){
                    //                    String idCom = (String) compMission.getValueAt(i, 0);
                    //                    String libelle = (String) compMission.getValueAt(i, 1);
                    //                    String nbRequisS = (String) compMission.getValueAt(i, 2);
                    //                    Integer nbRequisI = Integer.parseInt(nbRequisS);
                    //                    for(Competence uneComp : unEmp.getCompetences()){
                        //                        if(uneComp.getId().equals(idCom)){
                            //                            nbRequisI = nbRequisI - 1 ;
                            //                            modelComMission.removeRow(i);
                            //                            if(nbRequisI > 0){
                                //                                modelComMission.addRow(new Object[]{idCom,libelle,nbRequisI.toString()});
                                //                                compMission.setModel(modelComMission);
                                //                            }
                            //
                            //                        }
                        //                    }
                    //                }
                //            }
            //        }
    }//GEN-LAST:event_ajoutEmpActionPerformed

    private void removeEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEmpActionPerformed
        // TODO add your handling code here:

        int ligne = lesEmpDeLaMiss.getSelectedRow();
        int colonneId = 0 ;
        int colonneNom = 1;
        int colonnePrenom = 2 ;
        String id = (String) lesEmpDeLaMiss.getValueAt(ligne, colonneId);
        String nom = (String) lesEmpDeLaMiss.getValueAt(ligne, colonneNom);
        String prenom = (String) lesEmpDeLaMiss.getValueAt(ligne, colonnePrenom);

        DefaultTableModel modelLesEmp =(DefaultTableModel)  lesEmp.getModel();
        modelLesEmp.addRow(new Object[]{id,nom,prenom});
        lesEmp.setModel(modelLesEmp);
        DefaultTableModel modelLesEmpMission =(DefaultTableModel) lesEmpDeLaMiss.getModel();
        modelLesEmpMission.removeRow(ligne);
        lesEmpDeLaMiss.setModel(modelLesEmpMission);

        System.out.println(maMission.getCompRemp());
        Employe e = entreprise.recupEmpById(id);
        entreprise.delEmpMiss(maMission, e);
        System.out.println(maMission.getEquipe());
        System.out.println(maMission.getCompRemp());

        //Retirer employé des liste et rajouter compétence

        DefaultTableModel modelCompMission = new DefaultTableModel();
        modelCompMission.addColumn("id");
        modelCompMission.addColumn("libelle");
        modelCompMission.addColumn("Requis");
        for(HashMap.Entry<Competence,Integer> entry : maMission.compRemp.entrySet()){
            Competence key = entry.getKey();
            Integer value = entry.getValue();

            modelCompMission.addRow(new String[]{key.getId(), key.getLibelleFR(),value.toString()});

        }
        compMission.setModel(modelCompMission);
        entreprise.generateStatut(maMission);
        removeEmp.setEnabled(false);
        /*for(Employe unEmp : entreprise.getListeEmployes() ){
            if(unEmp.getId().equals(id)){
                maMission.equipe.remove(unEmp);
                //PROBLEME
                for(int i=0; i<compMission.getRowCount();i++){
                    String idCom = (String) compMission.getValueAt(i, 0);
                    String libelle = (String) compMission.getValueAt(i, 1);
                    String nbRequisS = (String) compMission.getValueAt(i, 2);
                    Integer nbRequisI = Integer.parseInt(nbRequisS);
                    System.out.println(idCom);
                    System.out.println(libelle);
                    System.out.println(nbRequisS);
                    //System.out.println(unEmp.toString());
                    /*for(Competence uneComp : unEmp.getCompetences()){
                        if(uneComp.getId().equals(idCom)){
                            nbRequisI = nbRequisI + 1 ;
                            modelComMission.removeRow(i);
                            modelComMission.addRow(new Object[]{idCom,libelle,nbRequisI.toString()});
                            compMission.setModel(modelComMission);
                            nbRequisI = 0 ;
                        }
                    }
                    modelComMission.addRow(new Object[]{idCom,libelle,nbRequisI.toString()});
                }
            }
        }*/
    }//GEN-LAST:event_removeEmpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AjoutMission2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AjoutMission2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AjoutMission2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AjoutMission2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
//            public void run() {
//                new AjoutMission().setVisible(true);
//            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNAjout;
    private javax.swing.JButton BTNRetour;
    private javax.swing.JButton ajoutEmp;
    private javax.swing.JButton ajouterComp;
    private javax.swing.JTable compMission;
    private javax.swing.JTextField dateDebA;
    private javax.swing.JTextField dateDebJ;
    private javax.swing.JTextField dateDebM;
    private javax.swing.JTextField dateFinA;
    private javax.swing.JTextField dateFinJ;
    private javax.swing.JTextField dateFinM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTLibelle;
    private javax.swing.JTextField jTNbEmpMax;
    private javax.swing.JTable jtableLesCompetences;
    private javax.swing.JTable lesEmp;
    private javax.swing.JTable lesEmpDeLaMiss;
    private javax.swing.JLabel message;
    private javax.swing.JButton removeComp;
    private javax.swing.JButton removeEmp;
    private javax.swing.JSpinner spnComp;
    // End of variables declaration//GEN-END:variables
}
